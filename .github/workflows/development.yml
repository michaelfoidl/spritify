name: development
on:
  push:
    branches: [ development ]
  workflow_dispatch:
jobs:
  build-common:
    runs-on: ubuntu-latest
    env:
      dotnet-version: '5.0.x'
      nuget-cache: ~/.nuget/packages/development/common
      nuget-cache-version: 1
    defaults:
      run:
        working-directory: ./common
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet-version }}
      - uses: ./.github/actions/restoreNugetPackages
        with:
          working-directory: ./common
          dotnet-version: ${{ env.dotnet-version }}
          project-path: ./Spritify.Common/Spritify.Common.csproj
          nuget-cache: ${{ env.nuget-cache }}
          nuget-cache-version: ${{ env.nuget-cache-version }}
      - name: Build Spritify Common
        run: |
          dotnet build ./Spritify.Common/Spritify.Common.csproj --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: spritify-common-build-${{ github.sha }}
          path: |
            ./**/bin
            ./**/obj
  build-api:
    runs-on: ubuntu-latest
    needs: build-common
    env:
      nuget-cache: ~/.nuget/packages/development/api
      nuget-cache-version: 1
    defaults:
      run:
        working-directory: ./api
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - uses: actions/cache@v2
        id: nuget-cache
        with:
          path: ${{ env.nuget-cache }}
          key: ${{ runner.os }}-nuget-v${{ env.nuget-cache-version }}-${{ hashFiles('**/packages.lock.json') }}
      - name: Restore Nuget Packages
        if: steps.nuget-cache.outputs.cache-hit != 'true'
        run: |
          dotnet restore ./Spritify.Api/Spritify.Api.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./common/Spritify.Api.Common/Spritify.Api.Common.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./common/Spritify.Api.Common.Interfaces/Spritify.Api.Common.Interfaces.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./core/Spritify.Api.Core/Spritify.Api.Core.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./core/Spritify.Api.Core.Interfaces/Spritify.Api.Core.Interfaces.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./core/Spritify.Api.Core.Entities/Spritify.Api.Core.Entities.csproj --packages ${{ env.nuget-cache }} --no-dependencies
      - name: Restore Additional Nuget Package Infos
        if: steps.nuget-cache.outputs.cache-hit == 'true'
        run: |
          dotnet restore ./Spritify.Api/Spritify.Api.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./common/Spritify.Api.Common/Spritify.Api.Common.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./common/Spritify.Api.Common.Interfaces/Spritify.Api.Common.Interfaces.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./core/Spritify.Api.Core/Spritify.Api.Core.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./core/Spritify.Api.Core.Interfaces/Spritify.Api.Core.Interfaces.csproj --packages ${{ env.nuget-cache }} --no-dependencies
          dotnet restore ./core/Spritify.Api.Core.Entities/Spritify.Api.Core.Entities.csproj --packages ${{ env.nuget-cache }} --no-dependencies
      - name: Restore Spritify Common build artifacts
        uses: actions/download-artifact@v2
        with:
          name: spritify-common-build-${{ github.sha }}
      - name: Build Spritify API
        run: |
          dotnet build ./Spritify.Api/Spritify.Api.csproj --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
          dotnet build ./common/Spritify.Api.Common/Spritify.Api.Common.csproj --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
          dotnet build ./common/Spritify.Api.Common.Interfaces/Spritify.Api.Common.Interfaces.csproj --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
          dotnet build ./core/Spritify.Api.Core/Spritify.Api.Core.csproj --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
          dotnet build ./core/Spritify.Api.Core.Interfaces/Spritify.Api.Core.Interfaces.csproj --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
          dotnet build ./core/Spritify.Api.Core.Entities/Spritify.Api.Core.Entities.csproj --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: spritify-api-build-${{ github.sha }}
          path: |
            ./**/bin
            ./**/obj
  build-web:
    runs-on: ubuntu-latest
    needs: build-common
    env:
      nuget-cache: ~/.nuget/packages/development/web
      nuget-cache-version: 1
      npm-cache: ~/.npm/packages/development/web
      npm-cache-version: 1
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - uses: actions/setup-node@v2
        with:
          node-version: '14.17.x'
      - uses: actions/cache@v2
        id: nuget-cache
        with:
          path: ${{ env.nuget-cache }}
          key: ${{ runner.os }}-nuget-v${{ env.nuget-cache-version }}-${{ hashFiles('**/packages.lock.json') }}
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ${{ env.npm-cache }}
          key: ${{ runner.os }}-npm-v${{ env.npm-cache-version }}-${{ hashFiles('**/package-lock.json') }}
      - name: Restore Nuget Packages
        if: steps.nuget-cache.outputs.cache-hit != 'true'
        run: |
          dotnet restore ./Spritify.Web/Spritify.Web.csproj --packages ${{ env.nuget-cache }} --no-dependencies
      - name: Restore Additional Nuget Package Infos
        if: steps.nuget-cache.outputs.cache-hit == 'true'
        run: |
          dotnet restore ./Spritify.Web/Spritify.Web.csproj --packages ${{ env.nuget-cache }} --no-dependencies
      - name: Restore npm Packages
        working-directory: ./web/Spritify.Web.Ui
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.npm-cache }}
          cp ./package.json ${{ env.npm-cache }}/
          npm --prefix ${{ env.npm-cache }} install ${{ env.npm-cache }}
      - name: Copy npm Packages from Cache
        working-directory: ./web/Spritify.Web.Ui
        run: cp -r ${{ env.npm-cache }}/node_modules .
      - name: Restore Spritify Common build artifacts
        uses: actions/download-artifact@v2
        with:
          name: spritify-common-build-${{ github.sha }}
      - name: Build Spritify Web
        run: |
          dotnet build ./Spritify.Web/Spritify.Web.csproj --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
      - name: Build Spritify Web UI
        working-directory: ./web/Spritify.Web.Ui
        run: npm run build
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: spritify-web-build-${{ github.sha }}
          path: |
            ./**/bin
            ./**/obj
            ./**/dist
            !./**/node_modules
  publish-api:
    runs-on: ubuntu-latest
    needs: build-api
    env:
      output-folder: ~/.publish/api
    defaults:
      run:
        working-directory: ./api
    steps:
      - uses: actions/checkout@v2
      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: spritify-api-build-${{ github.sha }}
      - name: Publish Spritify API
        run: |
          dotnet publish ./Spritify.Api/Spritify.Api.csproj --configuration Release --output ${{ env.output-folder }} --no-build
          dotnet publish ./common/Spritify.Api.Common/Spritify.Api.Common.csproj --configuration Release --output ${{ env.output-folder }} --no-build
          dotnet publish ./common/Spritify.Api.Common.Interfaces/Spritify.Api.Common.Interfaces.csproj --configuration Release --output ${{ env.output-folder }} --no-build
          dotnet publish ./core/Spritify.Api.Core/Spritify.Api.Core.csproj --configuration Release --output ${{ env.output-folder }} --no-build
          dotnet publish ./core/Spritify.Api.Core.Interfaces/Spritify.Api.Core.Interfaces.csproj --configuration Release --output ${{ env.output-folder }} --no-build
          dotnet publish ./core/Spritify.Api.Core.Entities/Spritify.Api.Core.Entities.csproj --configuration Release --output ${{ env.output-folder }} --no-build
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: spritify-api-${{ github.sha }}
          path: ${{ env.output-folder }}
  publish-web:
    runs-on: ubuntu-latest
    needs: build-web
    env:
      output-folder: ~/.publish/web
    defaults:
      run:
        working-directory: ./web
    steps:
      - uses: actions/checkout@v2
      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: spritify-web-build-${{ github.sha }}
      - name: Publish Spritify Web
        run: |
          dotnet publish ./Spritify.Web/Spritify.Web.csproj --configuration Release --output ${{ env.output-folder }} --no-build
      - name: Publish Spritify Web UI
        working-directory: ./web/Spritify.Web.Ui
        run: |
          mkdir ${{ env.output-folder }}/wwwroot
          cp -r ./dist/spritify/* ${{ env.output-folder }}/wwwroot
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: spritify-web-${{ github.sha }}
          path: ${{ env.output-folder }}
  deploy:
    runs-on: ubuntu-latest
    needs: [ publish-api, publish-web ]
    env:
      api-package-folder: ~/.publish/api
      web-package-folder: ~/.publish/web
    steps:
      - name: Get Spritify API package
        uses: actions/download-artifact@v2
        with:
          name: spritify-api-${{ github.sha }}
          path: ${{ env.api-package-folder }}
      - name: Get Spritify Web package
        uses: actions/download-artifact@v2
        with:
          name: spritify-web-${{ github.sha }}
          path: ${{ env.web-package-folder }}
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_HOST_SIGNATURE }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/github
          echo "IdentityFile ~/.ssh/github" >> ~/.ssh/config
          chmod -R 700 ~/.ssh  
      - name: Deploy Spritify API
        run: |
          rsync -avz -e ssh --delete ${{ env.api-package-folder }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/staging/spritify
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'cp -r /var/www/staging/spritify/configuration/api/* /var/www/staging/spritify/api'
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '/var/www/staging/spritify/startup/api'
      - name: Deploy Spritify Web
        run: |
          rsync -avz -e ssh --delete ${{ env.web-package-folder }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/staging/spritify
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'cp -r /var/www/staging/spritify/configuration/web/* /var/www/staging/spritify/web'
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '/var/www/staging/spritify/startup/web'
