name: build-node
description: 'Builds the given Node.js project(s).'
inputs:
  node-version:
    description: 'Node.js Version to use'
    required: true
  root-directory:
    description: 'Path to the root directory of the project - all projects inside this directory are built'
    required: true
  npm-cache-version:
    description: 'Version of the npm cache - changing the version allows cache invalidation without making changes to the source code'
    required: false
    default: '1'
  artifact-name:
    description: 'Name of the build artifact'
    required: true
  is-collaborative-build:
    description: 'If set to true, artifacts created during this build are collected, but not yet stored - this has to be done in a manual step afterwards.'
    required: false
    default: false
outputs:
  artifact-key:
    description: 'Key to the build artifact'
    value: ${{ steps.artifact-key.outputs.key }}
runs:
  using: 'composite'
  steps:
  - name: Setup Node.js
    uses: actions/setup-node@v2
    with:
      node-version: ${{ inputs.node-version }}
  - name: Normalize path
    id: normalize-path
    uses: ./.github/actions/normalize-path
    with:
      path: ${{ inputs.root-directory }}
  - name: Create cache key
    id: cache-key
    uses: ./.github/actions/create-cache-key
    with:
      cache-type: 'node'
      cache-version: ${{ inputs.npm-cache-version }}
      artifact-name: ${{ inputs.artifact-name }}
      hash-glob: ${{ github.workspace }}/**/${{ steps.normalize-path.outputs.path }}/**/package-lock.json
  - name: Create artifact key
    id: artifact-key
    uses: ./.github/actions/create-artifact-key
    with:
      artifact-name: ${{ inputs.artifact-name }}
      is-build-artifact: true
  - name: Find projects to build
    uses: ./.github/actions/find-projects
    id: find-projects
    with:
      root-directory: ${{ inputs.root-directory }}
      project-name-schema: 'package.json'
  - name: Look for cached dependencies
    uses: actions/cache@v2
    id: npm-cache
    with:
      path: ~/.npm/packages
      key: ${{ steps.cache-key.outputs.key }}
  - name: Analyze Cache
    shell: bash
    run: |
      echo "::group::Analyze Cache"
      if [ ${{ steps.npm-cache.outputs.cache-hit }} == "true" ];
      then
      echo "Cache OK - copying packages only";
      else
      echo "No Cache found - restoring packages";
      fi
      echo "::endgroup::"
  - name: Collect packages
    shell: bash
    working-directory: ${{ github.workspace }}/${{ steps.normalize-path.outputs.path }}
    run: |
      echo "::group::Collect packages"
      if [ ${{ steps.npm-cache.outputs.cache-hit }} == "true" ];
      then
      :
      else
      echo ${{ steps.find-projects.outputs.projects }} | sed "s/\/package.json//" | tr " " "\n" | xargs -I {} mkdir -p ~/.npm/packages/{};
      echo ${{ steps.find-projects.outputs.projects }} | tr " " "\n" | xargs -I {} cp {} ~/.npm/packages/{};
      echo ${{ steps.find-projects.outputs.projects }} | sed "s/\/package.json//" | tr " " "\n" | xargs -I {} npm --prefix ~/.npm/packages/{} install ~/.npm/packages/{};
      fi
      echo ${{ steps.find-projects.outputs.projects }} | sed "s/\/package.json//" | tr " " "\n" | xargs -I {} cp -r ~/.npm/packages/{}/node_modules {}
      echo "Packages collected successfully."
      echo "::endgroup::"
  - name: Build
    shell: bash
    working-directory: ${{ github.workspace }}/${{ steps.normalize-path.outputs.path }}
    run: |
      echo "::group::Build"
      echo ${{ steps.find-projects.outputs.projects }} | sed "s/\/package.json//" | tr " " "\n" | xargs -I {} npm --prefix {} run build
      echo "::endgroup::"
  - name: Cache artifact
    uses: ./.github/actions/store-cache
    with:
      artifact-key: ${{ steps.artifact-key.outputs.key }}
      artifact-mode: node
      collaboration-mode: ${{ inputs.is-collaborative-build == 'true' && 'collect' || 'default' }}