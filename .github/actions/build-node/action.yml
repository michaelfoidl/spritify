name: build-node
description: 'Builds the given Node.js project(s).'
inputs:
  node-version:
    description: 'Node.js Version to use'
    required: true
  root-directory:
    description: 'Path to the root directory of the project - all projects inside this directory are built'
    required: true
  npm-cache:
    description: 'Path to the directory where npm packages are stored (absolute)'
    required: true
  npm-cache-version:
    description: 'Version of the npm cache - changing the version allows cache invalidation without making changes to the source code'
    required: false
    default: '1'
  artifact-name:
    description: 'Name of the build artifact'
    required: true
runs:
  using: 'composite'
  steps:
  - name: Setup Node.js
    uses: actions/setup-node@v2
    with:
      node-version: ${{ inputs.node-version }}
  - name: Normalize path
    id: normalize-path
    uses: ./.github/actions/normalize-path
    with:
      path: ${{ inputs.root-directory }}
  - name: Find projects to build
    uses: ./.github/actions/find-projects
    id: find-projects
    with:
      root-directory: ${{ inputs.root-directory }}
      project-file-name-schema: 'package.json'
  - name: Look for cached dependencies
    uses: actions/cache@v2
    id: npm-cache
    with:
      path: ${{ inputs.npm-cache }}
      key: ${{ runner.os }}-npm-v${{ inputs.npm-cache-version }}-${{ hashFiles('**/package-lock.json') }}
  - name: Analyze Cache
    shell: bash
    run: |
      echo "::group::Analyze Cache"
      if [ ${{ steps.npm-cache.outputs.cache-hit }} == "true" ];
      then
      echo "Cache OK - copying packages only";
      else
      echo "No Cache found - restoring packages";
      fi
      echo "::endgroup::"
  - name: Collect packages
    shell: bash
    working-directory: ${{ github.workspace }}/${{ steps.normalize-path.outputs.path }}
    run: |
      echo "::group::Collect packages"
      if [ ${{ steps.npm-cache.outputs.cache-hit }} == "true" ];
      then
      else
      echo ${{ steps.find-projects.outputs.projects }} | sed "s/\/package.json//" | tr " " "\n" | xargs -I {} mkdir -p ${{ inputs.npm-cache }}/{};
      echo ${{ steps.find-projects.outputs.projects }} | tr " " "\n" | xargs -I {} cp {} ${{ inputs.npm-cache }}/{};
      echo ${{ steps.find-projects.outputs.projects }} | sed "s/\/package.json//" | tr " " "\n" | xargs -I {} npm --prefix ${{ inputs.npm-cache }}/{} install ${{ inputs.npm-cache }}/{};
      fi
      echo ${{ steps.find-projects.outputs.projects }} | sed "s/\/package.json//" | tr " " "\n" | xargs -I {} cp -r ${{ inputs.npm-cache }}/{}/node_modules {}
      echo "Packages collected successfully."
      echo "::endgroup::"
  - name: Build
    shell: bash
    working-directory: ${{ github.workspace }}/${{ steps.normalize-path.outputs.path }}
    run: |
      echo "::group::Build"
      echo ${{ steps.find-projects.outputs.projects }} | sed "s/\/package.json//" | tr " " "\n" | xargs -I {} npm --prefix {} run build
      echo "::endgroup::"
  - name: Archive artifacts
    uses: actions/upload-artifact@v2
    with:
      name: ${{ inputs.artifact-name }}
      path: |
        ${{ github.workspace }}/**/${{ steps.normalize-path.outputs.path }}/**/dist
        !${{ github.workspace }}/**/${{ steps.normalize-path.outputs.path }}/**/node_modules