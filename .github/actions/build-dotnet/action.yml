name: build-dotnet
description: 'Restores the nuget packages for the given project.'
inputs:
  dotnet-version:
    description: '.NET Version to use'
    required: true
  root-directory:
    description: 'Path to the root directory of the project - all projects inside this directory are built'
    required: true
  nuget-cache:
    description: 'Path to the directory where Nuget packages are stored (absolute)'
    required: true
  nuget-cache-version:
    description: 'Version of the Nuget cache - changing the version allows cache invalidation without making changes to the source code'
    required: false
    default: '1'
  artifact-name:
    description: 'Name of the build artifact'
    required: true
runs:
  using: 'composite'
  steps:
  - name: Process input parameters
    shell: bash
    run: |
      echo "::group::Process input parameters"
      echo "dotnet-version=${{ inputs.dotnet-version }}" >> $GITHUB_ENV
      echo ${{ inputs.root-directory }} | tr -d "./" | xargs -I {} echo "root-directory={}" >> $GITHUB_ENV
      echo "nuget-cache=${{ inputs.nuget-cache }}" >> $GITHUB_ENV
      echo "nuget-cache-version=${{ inputs.nuget-cache-version }}" >> $GITHUB_ENV
      echo "artifact-name=${{ inputs.artifact-name }}" >> $GITHUB_ENV
      echo "Finished successfully."
      echo "::endgroup::"
  - name: Checkout latest version
    uses: actions/checkout@v2
  - name: Setup .NET
    uses: actions/setup-dotnet@v1
    with:
      dotnet-version: ${{ env.dotnet-version }}
  - name: Find projects to build
    shell: bash
    working-directory: ${{ github.workspace }}/${{ env.root-directory }}
    run: |
      echo "::group::Find projects to build"
      PROJECTS=$(find . -type f -name "*.csproj")
      echo $PROJECTS | wc -w | xargs -I {} echo "Found {} project(s)."
      echo $PROJECTS | tr " " "\n" | xargs -I {} echo "projects={}" >> $GITHUB_ENV
      echo "::endgroup::"
  - name: Look for cached dependencies
    uses: actions/cache@v2
    id: nuget-cache
    with:
      path: ${{ env.nuget-cache }}
      key: ${{ runner.os }}-nuget-v${{ env.nuget-cache-version }}-${{ hashFiles('**/packages.lock.json') }}
  - name: Analyze Cache
    shell: bash
    run: |
      echo "::group::Analyze Cache"
      if [ ${{ steps.nuget-cache.outputs.cache-hit }} == "true" ];
      then
      echo "Cache OK - restoring package info only";
      else
      echo "No Cache found - restoring packages";
      fi
      echo "::endgroup::"
  - name: Nuget Restore
    shell: bash
    working-directory: ${{ github.workspace }}/${{ env.root-directory }}
    run: |
      echo "::group::Nuget Restore"
      echo ${{ env.projects }} | xargs -I {} dotnet restore {} --packages ${{ env.nuget-cache }} --no-dependencies
      echo "::endgroup::"
  - name: Build
    shell: bash
    working-directory: ${{ github.workspace }}/${{ env.root-directory }}
    run: |
      echo "::group::Build"
      echo ${{ env.projects }} | xargs -I {} dotnet build {} --configuration Release --verbosity minimal --no-restore --source ${{ env.nuget-cache }}
      echo "::endgroup::"
  - name: Archive artifacts
    uses: actions/upload-artifact@v2
    with:
      name: ${{ env.artifact-name }}
      path: |
        ${{ github.workspace }}/**/${{ env.root-directory }}/**/bin
        ${{ github.workspace }}/**/${{ env.root-directory }}/**/obj