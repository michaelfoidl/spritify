name: build-dotnet
description: 'Builds the given .NET project(s).'
inputs:
  dotnet-version:
    description: '.NET Version to use'
    required: true
  root-directory:
    description: 'Path to the root directory of the project - all projects inside this directory are built'
    required: true
  nuget-cache:
    description: 'Path to the directory where Nuget packages are stored (absolute)'
    required: true
  nuget-cache-version:
    description: 'Version of the Nuget cache - changing the version allows cache invalidation without making changes to the source code'
    required: false
    default: '1'
  artifact-name:
    description: 'Name of the build artifact'
    required: true
runs:
  using: 'composite'
  steps:
  - name: Setup .NET
    uses: actions/setup-dotnet@v1
    with:
      dotnet-version: ${{ inputs.dotnet-version }}
  - name: Normalize path
    id: normalize-path
    uses: ./.github/actions/normalize-path
    with:
      path: ${{ inputs.root-directory }}
  - name: Find projects to build
    uses: ./.github/actions/find-projects
    id: find-projects
    with:
      root-directory: ${{ inputs.root-directory }}
      project-name-schema: '*.csproj'
  - name: Look for cached dependencies
    uses: actions/cache@v2
    id: nuget-cache
    with:
      path: ${{ inputs.nuget-cache }}
      key: ${{ runner.os }}-nuget-v${{ inputs.nuget-cache-version }}-${{ hashFiles('${{ github.workspace }}/**/${{ steps.normalize-path.outputs.path }}/**/packages.lock.json') }}
  - name: Analyze Cache
    shell: bash
    run: |
      echo "::group::Analyze Cache"
      if [ ${{ steps.nuget-cache.outputs.cache-hit }} == "true" ];
      then
      echo "Cache OK - restoring package info only";
      else
      echo "No Cache found - restoring packages";
      fi
      echo "::endgroup::"
  - name: Nuget Restore
    shell: bash
    working-directory: ${{ github.workspace }}/${{ steps.normalize-path.outputs.path }}
    run: |
      echo "::group::Nuget Restore"
      echo ${{ steps.find-projects.outputs.projects }} | tr " " "\n" | xargs -I {} dotnet restore {} --packages ${{ inputs.nuget-cache }} --no-dependencies
      echo "::endgroup::"
  - name: Build
    shell: bash
    working-directory: ${{ github.workspace }}/${{ steps.normalize-path.outputs.path }}
    run: |
      echo "::group::Build"
      echo ${{ steps.find-projects.outputs.projects }} | tr " " "\n" | xargs -I {} dotnet build {} --configuration Release --verbosity minimal --no-restore --source ${{ inputs.nuget-cache }}
      echo "::endgroup::"
  - name: Archive artifacts
    uses: actions/upload-artifact@v2
    with:
      name: ${{ inputs.artifact-name }}
      path: |
        ${{ github.workspace }}/**/bin
        ${{ github.workspace }}/**/obj