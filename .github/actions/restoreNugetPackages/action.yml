name: restoreNugetPackages
description: 'Restores the nuget packages for the given project.'
inputs:
  working-directory:
    description: 'The directory to be used as root for all paths'
    required: false
    default: '.'
  dotnet-version:
    description: '.NET Version to use'
    required: true
  project-path:
    description: 'Path to the project file to restore'
    required: true
  nuget-cache:
    description: 'Path to the directory where Nuget packages are stored'
    required: true
  nuget-cache-version:
    description: 'Version of the Nuget cache - changing the version allows cache invalidation without making changes to the source code'
    required: false
    default: 1
runs:
  using: 'composite'
  steps:
  - uses: actions/checkout@v2
  - uses: actions/setup-dotnet@v1
    with:
      dotnet-version: ${{ inputs.dotnet-version }}
  - uses: actions/cache@v2
    id: nuget-cache
    with:
      path: ${{ inputs.nuget-cache }}
      key: ${{ runner.os }}-nuget-v${{ inputs.nuget-cache-version }}-${{ hashFiles('**/packages.lock.json') }}
  - name: Analyze Cache
    run: |
      if [ ${{ steps.nuget-cache.outputs.cache-hit }} == 'true' ] ; then
      echo "cache ok"
      fi
  - name: Restore Nuget Packages
    run: ${{ inputs.project-path }} | xargs -L1 dotnet restore --packages ${{ inputs.nuget-cache}} --no-dependencies