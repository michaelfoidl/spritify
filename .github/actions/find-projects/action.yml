name: find-projects
description: 'Searches for projects that match a given schema in the given workspace.'
inputs:
  root-directory:
    description: 'Path to the root directory where matching projects are searched for'
    required: true
  project-name-schema:
    description: 'An expression that can be used with the "-name" argument of the "find" command in order to identify matching project files'
    required: true
  test-projects:
    description: 'If set to true, only test projects are returned. If set to false, all projects except test projects are returned. If not set, all matching projects are returned.'
    required: false
    default: ''
outputs:
  projects:
    description: 'A space-separated list of matching projects'
    value: ${{ steps.find-projects.outputs.projects }}
runs:
  using: 'composite'
  steps:
  - name: Normalize path
    id: normalize-path
    uses: ./.github/actions/normalize-path
    with:
      path: ${{ inputs.root-directory }}
  - name: Find projects
    id: find-projects
    shell: bash
    working-directory: ${{ github.workspace }}/${{ steps.normalize-path.outputs.path }}
    run: |
      echo "::group::Find projects"
      if [ ${{ inputs.test-projects }} == true ];
      then
      echo "Mode: test projects only";
      PROJECTS=$(find . -type f -name ${{ inputs.project-name-schema }} -iname "*test*"| tr "\n" " ");
      elif [ ${{ inputs.test-projects }} == false ];
      then
      echo "Mode: non-test projects only";
      PROJECTS=$(find . -type f -name ${{ inputs.project-name-schema }} ! -iname "*test*" | tr "\n" " ");
      else
      echo "Mode: all projects";
      PROJECTS=$(find . -type f -name ${{ inputs.project-name-schema }} | tr "\n" " ");
      fi
      echo $PROJECTS | wc -w | xargs -I {} echo "Found {} project(s)."
      echo "::set-output name=projects::$(echo $PROJECTS)"
      echo "::endgroup::"